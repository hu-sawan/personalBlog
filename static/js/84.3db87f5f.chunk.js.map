{"version":3,"file":"static/js/84.3db87f5f.chunk.js","mappings":"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","sources":["data/firebase.js","pages/postForm/PostForm.js","pages/loginPage/LoginPage.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getStorage } from \"firebase/storage\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBSAE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBSAE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBSAE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBSAE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBSAE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBSAE_APP_ID,\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth(firebaseApp);\r\n\r\nexport const storage = getStorage(firebaseApp);\r\n","import \"./postForm.css\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { storage } from \"../../data/firebase\";\r\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\nimport LoadPage from \"../../components/loadPage/LoadPage\";\r\n\r\n// will be used as the id for the post\r\n// declared here in order to not get updated each time the state will change\r\nconst postid = nanoid();\r\n\r\nfunction PostForm() {\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // to handle errors more efficiently\r\n    const [error, setError] = useState(\"\");\r\n\r\n    // will restructure in the backend and add time\r\n    const [formData, setFormData] = useState({\r\n        _id: postid,\r\n        title: \"\",\r\n        content: \"\",\r\n        author: \"\",\r\n        facebook: \"\",\r\n        linkedin: \"\",\r\n        youtube: \"\",\r\n        imageUrl: \"\",\r\n    });\r\n    // used to prevent sending the data to the backend on mount since we only want to send it when\r\n    // the image is uploaded to the storage and we get the link\r\n    const isMounted = useRef(false);\r\n\r\n    // send the image to the cloud storage and return the link\r\n    const sendImageToStorage = async (field) => {\r\n        const file = field?.files[0];\r\n\r\n        // if no file was submitted\r\n        if (!file) {\r\n            setError(\"Image was not submitted!\");\r\n            return;\r\n        }\r\n\r\n        // get the file extension, type is in the form of image/png or any other type\r\n        const typeArray = file.type.split(\"/\");\r\n        const fileExtentsion = typeArray[typeArray.length - 1];\r\n\r\n        // create a reference to the storage\r\n        const storageRef = ref(storage, `posts/${postid}.${fileExtentsion}`);\r\n\r\n        setLoading(true);\r\n\r\n        const snapshot = await uploadBytes(storageRef, file);\r\n        const downloadURL = await getDownloadURL(snapshot.ref);\r\n\r\n        if (!downloadURL) {\r\n            setError(\"Image was not uploaded!\");\r\n            return;\r\n        }\r\n\r\n        return downloadURL;\r\n    };\r\n\r\n    const handleImage = async (field) => {\r\n        try {\r\n            const downloadURL = await sendImageToStorage(field);\r\n\r\n            if (!downloadURL) return;\r\n\r\n            setFormData((prevData) => {\r\n                return {\r\n                    ...prevData,\r\n                    imageUrl: downloadURL,\r\n                };\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    const sendDataToApi = async () => {\r\n        try {\r\n            console.log(formData);\r\n            const res = await fetch(\"http://localhost:3001/api/addPost\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n            if (res.ok) console.log(\"post sent successfully\");\r\n            setLoading(false);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const sendData = async () => {\r\n            await sendDataToApi();\r\n\r\n            // only reload the page if there is no error\r\n            if (!error) {\r\n                window.location.reload();\r\n            }\r\n        };\r\n        if (isMounted.current) {\r\n            sendData();\r\n        } else {\r\n            isMounted.current = true;\r\n        }\r\n    }, [formData.imageUrl]);\r\n\r\n    /**\r\n     * problems I faced and how I solved them:\r\n     * since the proccess of uploading the image to the storage is async I faced a weired behaviour from the setter of\r\n     * the formData which is that that I was not able to force the handleImage function to wait for the setFormData to finish\r\n     * updating the state and then send the data to the api because the setFormData is async and I can't use await with it\r\n     * and because of that the api request was sent before the state was updated and the imageUrl was still empty.\r\n     *\r\n     * how I solved it:\r\n     * I updated handle submit to only handle the image uploading proccess and then I created a new function called sendDataToApi\r\n     * which I used useEffect to call it after the imageUrl is updated and then I used the isMounted ref to prevent sending the data\r\n     * to the api on mount else it will send the data twice on the first time will be empty and the second time will be with the imageUrl.\r\n     * */\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError(\"\");\r\n\r\n        /**\r\n         * I can target the index directly but this appraoch will allow changing\r\n         * the order of the file input in the form\r\n         * */\r\n        for (const child of e.target)\r\n            if (child.type === \"file\") await handleImage(child);\r\n\r\n        /*\r\n            TODO: Try to find a way to reset the form after submitting the data without the need to reload the page\r\n            ! FIX: check if this is working\r\n            ! it is leading to uncosistency between the id assigned to the image name in the \r\n            ! starage and the id assigned to the document after being sent to the database\r\n        setFormData({\r\n            _id: nanoid(),\r\n            title: \"\",\r\n            content: \"\",\r\n            author: \"\",\r\n            facebook: \"\",\r\n            linkedin: \"\",\r\n            youtube: \"\",\r\n            imageUrl: \"\",\r\n        }); */\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        setFormData((prevData) => {\r\n            return {\r\n                ...prevData,\r\n                [e.target.name]: e.target.value,\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {loading && <LoadPage isActive={loading} />}\r\n            <div className=\"post-form-section\">\r\n                <div className=\"container\">\r\n                    <h2>Add Post</h2>\r\n                    {error && <div className=\"alert\">{error}</div>}\r\n                    <form onSubmit={handleSubmit}>\r\n                        <input\r\n                            value={formData.title}\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            placeholder=\"Enter post title\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <input\r\n                            value={formData.author}\r\n                            type=\"text\"\r\n                            name=\"author\"\r\n                            placeholder=\"Enter your name\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <input\r\n                            value={formData.facebook}\r\n                            type=\"text\"\r\n                            name=\"facebook\"\r\n                            placeholder=\"Enter facebook url\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <input\r\n                            value={formData.linkedin}\r\n                            type=\"text\"\r\n                            name=\"linkedin\"\r\n                            placeholder=\"Enter linkedin url\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <input\r\n                            value={formData.youtube}\r\n                            type=\"text\"\r\n                            name=\"youtube\"\r\n                            placeholder=\"Enter youtube url\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <textarea\r\n                            name=\"content\"\r\n                            placeholder=\"enter post content\"\r\n                            onChange={handleChange}\r\n                            value={formData.content}\r\n                        />\r\n                        <input type=\"file\" required={true} />\r\n                        <input type=\"submit\" />\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PostForm;\r\n","import \"./loginPage.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PostForm from \"../postForm/PostForm\";\r\nimport { auth } from \"../../data/firebase\";\r\nimport { signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\r\n\r\nfunction LoginPage() {\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [error, setError] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [formData, setFormData] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n    });\r\n\r\n    const handleChange = (e) => {\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [e.target.name]: e.target.value,\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            setError(\"\");\r\n            setLoading(true);\r\n            await signInWithEmailAndPassword(\r\n                auth,\r\n                formData.email,\r\n                formData.password\r\n            );\r\n        } catch {\r\n            setError(\"Failed to log in\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n            setCurrentUser(user);\r\n        });\r\n\r\n        return unsubscribe;\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setError(\"\");\r\n        }, 4000);\r\n    }, [error]);\r\n\r\n    if (currentUser) return <PostForm />;\r\n\r\n    return (\r\n        <div className=\"login-section container\">\r\n            <div className=\"form-card\">\r\n                <h2>Login</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className={`alert ${error ? \"show\" : null}`}>\r\n                        {error}\r\n                    </div>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        name=\"email\"\r\n                        value={formData.email}\r\n                        onChange={handleChange}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        id=\"email\"\r\n                        placeholder=\"Email\"\r\n                    />\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        name=\"password\"\r\n                        value={formData.password}\r\n                        onChange={handleChange}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        id=\"password\"\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"submit-btn\"\r\n                        disabled={loading}\r\n                    />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"names":["firebaseApp","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","getAuth","storage","getStorage","postid","nanoid","loading","setLoading","useState","error","setError","formData","setFormData","_id","title","content","author","facebook","linkedin","youtube","imageUrl","isMounted","useRef","handleImage","async","downloadURL","file","field","files","typeArray","type","split","fileExtentsion","length","storageRef","ref","concat","snapshot","uploadBytes","getDownloadURL","sendImageToStorage","prevData","e","console","log","useEffect","sendData","fetch","method","headers","body","JSON","stringify","ok","sendDataToApi","window","location","reload","current","handleChange","target","name","value","_jsxs","_Fragment","children","_jsx","LoadPage","isActive","className","onSubmit","preventDefault","child","placeholder","onChange","required","currentUser","setCurrentUser","email","password","prevFormData","onAuthStateChanged","user","setTimeout","PostForm","signInWithEmailAndPassword","htmlFor","id","disabled"],"sourceRoot":""}